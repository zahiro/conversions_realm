### publisher conversions by country and date

library("ggplot2",      lib.loc="~/R/x86_64-redhat-linux-gnu-library/3.1")             ;
library("doBy",         lib.loc="~/R/x86_64-redhat-linux-gnu-library/3.1")             ;
library("plyr",         lib.loc="~/R/x86_64-redhat-linux-gnu-library/3.1")             ;
library("reldist",      lib.loc="~/R/x86_64-redhat-linux-gnu-library/3.1")             ;
library("latticeExtra", lib.loc="~/R/x86_64-redhat-linux-gnu-library/3.1")             ;
library("doBy",         lib.loc="~/R/x86_64-redhat-linux-gnu-library/3.1")             ;
library("reshape2",     lib.loc="~/R/x86_64-redhat-linux-gnu-library/3.1")             ;
overall <- proc.time() 
Junedata <- read.csv("~/Conversions_01/conversions1_data_folder/conversionsJune.csv" )
Maydata  <- read.csv("~/Conversions_01/conversions1_data_folder/conversionsMay.csv"  )
raw <- rbind(Maydata,Junedata)
#raw1<-raw[1:1000,]
rm(Junedata,Maydata)
names(raw)= c("date","hour","country","publisher_id","advertiser_id","conversions","uuids")
###          first main processing phase. takes ~55 Sec
CpDCPA   <- rbind(      aggregate(conversions ~ date + country + publisher_id + advertiser_id , data = raw, FUN = sum),
                        cbind(aggregate(conversions ~ date +           publisher_id + advertiser_id , data = raw, FUN = sum), country="all"))
# rm(raw)
CpDCPA$publisher_id   <- factor(CpDCPA$publisher_id)
CpDCPA$advertiser_id  <- factor(CpDCPA$advertiser_id)
### add total publisher field. merge. divide. rename
CpDCP                <- aggregate(conversions ~ date + country + publisher_id , data = CpDCPA, FUN = sum)
CpCDPAmerged         <- merge(CpDCPA,CpDCP,by=c("date","country","publisher_id")) 
CpCDPAmerged$per_pub <- CpCDPAmerged$conversions.x/CpCDPAmerged$conversions.y
names(CpCDPAmerged)  <- c("date","country","publisher_id","advertiser_id","conversions","pub_conversions","per_pub")
CpCDPAmerged$date    <- as.Date(CpCDPAmerged$date)
rm(raw)
rm(CpDCP) 
df<-split(CpCDPAmerged,CpCDPAmerged$date)
dfn<-data.frame(date=NA,country=NA,publisher_id=NA,advertiser_id=NA,conversions=NA,pub_conversions=NA,per_pub=NA,rank=NA)
dfn<-dfn[-1,]


### loop day-by-day
ptt <- proc.time()
for (i in 1:length(df)) {
  pt <- proc.time()
  temp <- droplevels(df[[i]])
  rank <- ave(temp$conversions, temp$country, temp$publisher_id, FUN = function(x) rank(-x, ties.method = "first"))
  temp <- cbind(temp,rank)
  dfn <- rbind(dfn,temp)  
  print(paste0("phase # ",i," /  ",length(df)))
  print(proc.time() - pt)
  print(proc.time() - ptt)
}

peradv      <- summaryBy(conversions ~ advertiser_id             ,data=dfn,FUN = sum, keep.names=TRUE)
perpub      <- summaryBy(conversions ~ publisher_id              ,data=dfn,FUN = sum, keep.names=TRUE)
pergeo      <- summaryBy(conversions ~ country                   ,data=dfn,FUN = sum, keep.names=TRUE)
perpubNgeo  <- summaryBy(conversions ~ country + publisher_id    ,data=dfn,FUN = sum, keep.names=TRUE)
###   ranking the pubs and geo
perpub$rank <-  ave(perpub$conversions, FUN = function(x) rank(-x, ties.method = "first"))
pergeo$rank <-  ave(pergeo$conversions, FUN = function(x) rank(-x, ties.method = "first"))

### Metrics per date publishe AND GEO
gf  <- summaryBy(conversions ~ date + country + publisher_id, data = dfn, FUN = function(x) { c(sum = sum(x), sd = sd(x), length = length(x), avg = mean(x), relsd = sd(x)/mean(x),gini = gini(x)) } )
g1  <- summaryBy(conversions ~ date + country + publisher_id, data = dfn[dfn$rank<=1 ,], FUN=sum)
g3  <- summaryBy(conversions ~ date + country + publisher_id, data = dfn[dfn$rank<=3 ,], FUN=sum)
g5  <- summaryBy(conversions ~ date + country + publisher_id, data = dfn[dfn$rank<=5 ,], FUN=sum)
g10 <- summaryBy(conversions ~ date + country + publisher_id, data = dfn[dfn$rank<=10,], FUN=sum)

names(g1)[4] <- "top1"
names(g3)[4] <- "top3"
names(g5)[4] <- "top5"
names(g10)[4] <-"top10"

gmetrics <- merge(gf,       g1 , by =c("date","country","publisher_id"))
gmetrics <- merge(gmetrics, g3 , by =c("date","country","publisher_id"))
gmetrics <- merge(gmetrics, g5 , by =c("date","country","publisher_id"))
gmetrics <- merge(gmetrics, g10, by =c("date","country","publisher_id"))

gmetrics2 <- merge(dfn[dfn$rank==1,1:4], dfn[dfn$rank==2,1:4], by=c("date","country","publisher_id") ,all.x=TRUE)
gmetrics2 <- merge(gmetrics2,            dfn[dfn$rank==3,1:4], by=c("date","country","publisher_id") ,all.x=TRUE)
gmetrics  <- merge(gmetrics,             gmetrics2,            by=c("date","country","publisher_id")            ) 

names(gmetrics)       <- c("date","country","publisher_id","conversionsSum","conversionsSD","advertisers",
                           "avgConvPerAdv","conversionsRelSD","conversionsGini","top1Cov","top3Cov","top5Cov","top10Cov",
                           "first_adv_id","second_adv_id","third_adv_id")

dfp                   <- summaryBy(conversionsSum +  top1Cov + top3Cov  + top5Cov  + top10Cov ~ date + country  , data = gmetrics, FUN = sum, keep.names=TRUE)
dfpmelt               <- melt(dfp,id=1:3,factorsAsStrings=FALSE,value.name="topXCov")
dfpmelt$Perc          <- 100 * dfpmelt$topXCov / dfpmelt$conversionsSum
publist               <- droplevels(perpub[perpub$rank<=5,1])
geolist               <- droplevels(pergeo[pergeo$rank<=5,1])
topNPubsData          <- summaryBy(conversionsSum +  top1Cov + top3Cov  + top5Cov	+ top10Cov ~ date + publisher_id + country , 
                                   data = gmetrics[gmetrics$publisher_id %in% publist & gmetrics$country %in% geolist,],           FUN = sum, keep.names=TRUE)
topNPubsDataMelt      <- melt(topNPubsData,id=1:4,factorsAsStrings=FALSE,value.name="topXCov")
topNPubsDataMelt$Perc <- 100 * topNPubsDataMelt$topXCov / topNPubsDataMelt$conversionsSum

### display data layer
dispData <- droplevels(perpubNgeo[perpubNgeo$publisher_id %in% publist & perpubNgeo$country %in% geolist,])
vars <- data.frame(expand.grid( levels(dispData$country),levels(dispData$publisher_id),levels(topNPubsDataMelt$variable)))
names(vars) <- c("country","publisher_id","variable")
dat = merge ( data.frame(x = as.Date('2015-05-20'), y = 10, vars),perpubNgeo, by = c("publisher_id","country")) ##change date to middle of display period
p <- ggplot(data=topNPubsDataMelt,aes(x=date,y=Perc,color=variable,group=variable)) + geom_line() + facet_grid( publisher_id ~ country, labeller =label_both) #facet_wrap(~country)

p2 = p + facet_grid(publisher_id ~ country) + geom_text(aes(x, y, label=paste("Totalconversions  =",conversions) ,group=NULL), data=dat,size=4,alpha=0.5)


## to do

# 1. date chooser
# 2. geo chooser - leave all in place. allow up to 4
# 3. publishers chooser allow 5
